package com.yunsu.greendao.entity;

import java.util.List;
import com.yunsu.greendao.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.yunsu.greendao.dao.PackDao;
import com.yunsu.greendao.dao.ProductBaseDao;
import com.yunsu.greendao.dao.ProductDao;
import com.yunsu.greendao.dao.StaffDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "PACK".
 */
public class Pack {

    private Long id;
    /** Not-null value. */
    private String packKey;
    private String status;
    private String lastSaveTime;
    private Integer standard;
    private Integer realCount;
    private Long staffId;
    private Long productBaseId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient PackDao myDao;

    private Staff staff;
    private Long staff__resolvedKey;

    private ProductBase productBase;
    private Long productBase__resolvedKey;

    private List<Product> products;

    public Pack() {
    }

    public Pack(Long id) {
        this.id = id;
    }

    public Pack(Long id, String packKey, String status, String lastSaveTime, Integer standard, Integer realCount, Long staffId, Long productBaseId) {
        this.id = id;
        this.packKey = packKey;
        this.status = status;
        this.lastSaveTime = lastSaveTime;
        this.standard = standard;
        this.realCount = realCount;
        this.staffId = staffId;
        this.productBaseId = productBaseId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getPackDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getPackKey() {
        return packKey;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setPackKey(String packKey) {
        this.packKey = packKey;
    }

    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    public String getLastSaveTime() {
        return lastSaveTime;
    }

    public void setLastSaveTime(String lastSaveTime) {
        this.lastSaveTime = lastSaveTime;
    }

    public Integer getStandard() {
        return standard;
    }

    public void setStandard(Integer standard) {
        this.standard = standard;
    }

    public Integer getRealCount() {
        return realCount;
    }

    public void setRealCount(Integer realCount) {
        this.realCount = realCount;
    }

    public Long getStaffId() {
        return staffId;
    }

    public void setStaffId(Long staffId) {
        this.staffId = staffId;
    }

    public Long getProductBaseId() {
        return productBaseId;
    }

    public void setProductBaseId(Long productBaseId) {
        this.productBaseId = productBaseId;
    }

    /** To-one relationship, resolved on first access. */
    public Staff getStaff() {
        Long __key = this.staffId;
        if (staff__resolvedKey == null || !staff__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            StaffDao targetDao = daoSession.getStaffDao();
            Staff staffNew = targetDao.load(__key);
            synchronized (this) {
                staff = staffNew;
            	staff__resolvedKey = __key;
            }
        }
        return staff;
    }

    public void setStaff(Staff staff) {
        synchronized (this) {
            this.staff = staff;
            staffId = staff == null ? null : staff.getId();
            staff__resolvedKey = staffId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public ProductBase getProductBase() {
        Long __key = this.productBaseId;
        if (productBase__resolvedKey == null || !productBase__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ProductBaseDao targetDao = daoSession.getProductBaseDao();
            ProductBase productBaseNew = targetDao.load(__key);
            synchronized (this) {
                productBase = productBaseNew;
            	productBase__resolvedKey = __key;
            }
        }
        return productBase;
    }

    public void setProductBase(ProductBase productBase) {
        synchronized (this) {
            this.productBase = productBase;
            productBaseId = productBase == null ? null : productBase.getId();
            productBase__resolvedKey = productBaseId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Product> getProducts() {
        if (products == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ProductDao targetDao = daoSession.getProductDao();
            List<Product> productsNew = targetDao._queryPack_Products(id);
            synchronized (this) {
                if(products == null) {
                    products = productsNew;
                }
            }
        }
        return products;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetProducts() {
        products = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
