package com.yunsu.greendao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.yunsu.greendao.entity.Order;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ORDER".
*/
public class OrderDao extends AbstractDao<Order, Long> {

    public static final String TABLENAME = "ORDER";

    /**
     * Properties of entity Order.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property OrderNumber = new Property(1, String.class, "orderNumber", false, "ORDER_NUMBER");
        public final static Property CustomerName = new Property(2, String.class, "customerName", false, "CUSTOMER_NAME");
        public final static Property Consignee = new Property(3, String.class, "consignee", false, "CONSIGNEE");
        public final static Property ContactPhone = new Property(4, String.class, "contactPhone", false, "CONTACT_PHONE");
        public final static Property DeliveryAddress = new Property(5, String.class, "deliveryAddress", false, "DELIVERY_ADDRESS");
        public final static Property TransportationAgent = new Property(6, String.class, "transportationAgent", false, "TRANSPORTATION_AGENT");
        public final static Property LicensePlateNumber = new Property(7, String.class, "licensePlateNumber", false, "LICENSE_PLATE_NUMBER");
        public final static Property CarrierName = new Property(8, String.class, "carrierName", false, "CARRIER_NAME");
        public final static Property CarrierPhone = new Property(9, String.class, "carrierPhone", false, "CARRIER_PHONE");
        public final static Property CarrierIdNumber = new Property(10, String.class, "carrierIdNumber", false, "CARRIER_ID_NUMBER");
        public final static Property DeliveryWarehouse = new Property(11, String.class, "deliveryWarehouse", false, "DELIVERY_WAREHOUSE");
        public final static Property Status = new Property(12, String.class, "status", false, "STATUS");
        public final static Property DeliveryTime = new Property(13, String.class, "deliveryTime", false, "DELIVERY_TIME");
    };

    private DaoSession daoSession;


    public OrderDao(DaoConfig config) {
        super(config);
    }
    
    public OrderDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ORDER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ORDER_NUMBER\" TEXT," + // 1: orderNumber
                "\"CUSTOMER_NAME\" TEXT," + // 2: customerName
                "\"CONSIGNEE\" TEXT," + // 3: consignee
                "\"CONTACT_PHONE\" TEXT," + // 4: contactPhone
                "\"DELIVERY_ADDRESS\" TEXT," + // 5: deliveryAddress
                "\"TRANSPORTATION_AGENT\" TEXT," + // 6: transportationAgent
                "\"LICENSE_PLATE_NUMBER\" TEXT," + // 7: licensePlateNumber
                "\"CARRIER_NAME\" TEXT," + // 8: carrierName
                "\"CARRIER_PHONE\" TEXT," + // 9: carrierPhone
                "\"CARRIER_ID_NUMBER\" TEXT," + // 10: carrierIdNumber
                "\"DELIVERY_WAREHOUSE\" TEXT," + // 11: deliveryWarehouse
                "\"STATUS\" TEXT," + // 12: status
                "\"DELIVERY_TIME\" TEXT);"); // 13: deliveryTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ORDER\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Order entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String orderNumber = entity.getOrderNumber();
        if (orderNumber != null) {
            stmt.bindString(2, orderNumber);
        }
 
        String customerName = entity.getCustomerName();
        if (customerName != null) {
            stmt.bindString(3, customerName);
        }
 
        String consignee = entity.getConsignee();
        if (consignee != null) {
            stmt.bindString(4, consignee);
        }
 
        String contactPhone = entity.getContactPhone();
        if (contactPhone != null) {
            stmt.bindString(5, contactPhone);
        }
 
        String deliveryAddress = entity.getDeliveryAddress();
        if (deliveryAddress != null) {
            stmt.bindString(6, deliveryAddress);
        }
 
        String transportationAgent = entity.getTransportationAgent();
        if (transportationAgent != null) {
            stmt.bindString(7, transportationAgent);
        }
 
        String licensePlateNumber = entity.getLicensePlateNumber();
        if (licensePlateNumber != null) {
            stmt.bindString(8, licensePlateNumber);
        }
 
        String carrierName = entity.getCarrierName();
        if (carrierName != null) {
            stmt.bindString(9, carrierName);
        }
 
        String carrierPhone = entity.getCarrierPhone();
        if (carrierPhone != null) {
            stmt.bindString(10, carrierPhone);
        }
 
        String carrierIdNumber = entity.getCarrierIdNumber();
        if (carrierIdNumber != null) {
            stmt.bindString(11, carrierIdNumber);
        }
 
        String deliveryWarehouse = entity.getDeliveryWarehouse();
        if (deliveryWarehouse != null) {
            stmt.bindString(12, deliveryWarehouse);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(13, status);
        }
 
        String deliveryTime = entity.getDeliveryTime();
        if (deliveryTime != null) {
            stmt.bindString(14, deliveryTime);
        }
    }

    @Override
    protected void attachEntity(Order entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Order readEntity(Cursor cursor, int offset) {
        Order entity = new Order( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // orderNumber
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // customerName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // consignee
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // contactPhone
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // deliveryAddress
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // transportationAgent
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // licensePlateNumber
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // carrierName
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // carrierPhone
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // carrierIdNumber
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // deliveryWarehouse
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // status
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // deliveryTime
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Order entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOrderNumber(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCustomerName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setConsignee(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setContactPhone(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDeliveryAddress(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTransportationAgent(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLicensePlateNumber(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCarrierName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCarrierPhone(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCarrierIdNumber(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setDeliveryWarehouse(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setStatus(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setDeliveryTime(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Order entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Order entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
