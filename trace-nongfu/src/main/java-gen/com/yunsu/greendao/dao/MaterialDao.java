package com.yunsu.greendao.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.yunsu.greendao.entity.Order;

import com.yunsu.greendao.entity.Material;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MATERIAL".
*/
public class MaterialDao extends AbstractDao<Material, Long> {

    public static final String TABLENAME = "MATERIAL";

    /**
     * Properties of entity Material.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MaterialNumber = new Property(1, String.class, "materialNumber", false, "MATERIAL_NUMBER");
        public final static Property HeadSize = new Property(2, String.class, "headSize", false, "HEAD_SIZE");
        public final static Property Level = new Property(3, String.class, "level", false, "LEVEL");
        public final static Property NetWeight = new Property(4, String.class, "netWeight", false, "NET_WEIGHT");
        public final static Property Status = new Property(5, String.class, "status", false, "STATUS");
        public final static Property Time = new Property(6, String.class, "time", false, "TIME");
        public final static Property Amount = new Property(7, Long.class, "amount", false, "AMOUNT");
        public final static Property Sent = new Property(8, Long.class, "sent", false, "SENT");
        public final static Property Remain = new Property(9, Long.class, "remain", false, "REMAIN");
        public final static Property OrderId = new Property(10, Long.class, "orderId", false, "ORDER_ID");
    };

    private DaoSession daoSession;

    private Query<Material> order_MaterialsQuery;

    public MaterialDao(DaoConfig config) {
        super(config);
    }
    
    public MaterialDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MATERIAL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"MATERIAL_NUMBER\" TEXT," + // 1: materialNumber
                "\"HEAD_SIZE\" TEXT," + // 2: headSize
                "\"LEVEL\" TEXT," + // 3: level
                "\"NET_WEIGHT\" TEXT," + // 4: netWeight
                "\"STATUS\" TEXT," + // 5: status
                "\"TIME\" TEXT," + // 6: time
                "\"AMOUNT\" INTEGER," + // 7: amount
                "\"SENT\" INTEGER," + // 8: sent
                "\"REMAIN\" INTEGER," + // 9: remain
                "\"ORDER_ID\" INTEGER);"); // 10: orderId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MATERIAL\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Material entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String materialNumber = entity.getMaterialNumber();
        if (materialNumber != null) {
            stmt.bindString(2, materialNumber);
        }
 
        String headSize = entity.getHeadSize();
        if (headSize != null) {
            stmt.bindString(3, headSize);
        }
 
        String level = entity.getLevel();
        if (level != null) {
            stmt.bindString(4, level);
        }
 
        String netWeight = entity.getNetWeight();
        if (netWeight != null) {
            stmt.bindString(5, netWeight);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(6, status);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(7, time);
        }
 
        Long amount = entity.getAmount();
        if (amount != null) {
            stmt.bindLong(8, amount);
        }
 
        Long sent = entity.getSent();
        if (sent != null) {
            stmt.bindLong(9, sent);
        }
 
        Long remain = entity.getRemain();
        if (remain != null) {
            stmt.bindLong(10, remain);
        }
 
        Long orderId = entity.getOrderId();
        if (orderId != null) {
            stmt.bindLong(11, orderId);
        }
    }

    @Override
    protected void attachEntity(Material entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Material readEntity(Cursor cursor, int offset) {
        Material entity = new Material( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // materialNumber
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // headSize
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // level
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // netWeight
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // status
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // time
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // amount
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // sent
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9), // remain
            cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10) // orderId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Material entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMaterialNumber(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setHeadSize(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLevel(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setNetWeight(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setStatus(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAmount(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setSent(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setRemain(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
        entity.setOrderId(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Material entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Material entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "materials" to-many relationship of Order. */
    public List<Material> _queryOrder_Materials(Long orderId) {
        synchronized (this) {
            if (order_MaterialsQuery == null) {
                QueryBuilder<Material> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.OrderId.eq(null));
                order_MaterialsQuery = queryBuilder.build();
            }
        }
        Query<Material> query = order_MaterialsQuery.forCurrentThread();
        query.setParameter(0, orderId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getOrderDao().getAllColumns());
            builder.append(" FROM MATERIAL T");
            builder.append(" LEFT JOIN ORDER T0 ON T.\"ORDER_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Material loadCurrentDeep(Cursor cursor, boolean lock) {
        Material entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Order order = loadCurrentOther(daoSession.getOrderDao(), cursor, offset);
        entity.setOrder(order);

        return entity;    
    }

    public Material loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Material> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Material> list = new ArrayList<Material>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Material> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Material> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
