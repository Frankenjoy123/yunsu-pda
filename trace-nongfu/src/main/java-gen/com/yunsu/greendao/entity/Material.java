package com.yunsu.greendao.entity;

import com.yunsu.greendao.dao.DaoSession;
import com.yunsu.greendao.dao.MaterialDao;
import com.yunsu.greendao.dao.OrderDao;
import com.yunsu.greendao.dao.PackDao;

import java.util.List;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "MATERIAL".
 */
public class Material {

    private Long id;
    private String materialNumber;
    private String headSize;
    private String level;
    private String netWeight;
    private String status;
    private String time;
    private Long amount;
    private Long sent;
    private Long remain;
    private Long orderId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient MaterialDao myDao;

    private Order order;
    private Long order__resolvedKey;

    private List<Pack> packs;

    public Material() {
    }

    public Material(Long id) {
        this.id = id;
    }

    public Material(Long id, String materialNumber, String headSize, String level, String netWeight, String status, String time, Long amount, Long sent, Long remain, Long orderId) {
        this.id = id;
        this.materialNumber = materialNumber;
        this.headSize = headSize;
        this.level = level;
        this.netWeight = netWeight;
        this.status = status;
        this.time = time;
        this.amount = amount;
        this.sent = sent;
        this.remain = remain;
        this.orderId = orderId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getMaterialDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getMaterialNumber() {
        return materialNumber;
    }

    public void setMaterialNumber(String materialNumber) {
        this.materialNumber = materialNumber;
    }

    public String getHeadSize() {
        return headSize;
    }

    public void setHeadSize(String headSize) {
        this.headSize = headSize;
    }

    public String getLevel() {
        return level;
    }

    public void setLevel(String level) {
        this.level = level;
    }

    public String getNetWeight() {
        return netWeight;
    }

    public void setNetWeight(String netWeight) {
        this.netWeight = netWeight;
    }

    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    public String getTime() {
        return time;
    }

    public void setTime(String time) {
        this.time = time;
    }

    public Long getAmount() {
        return amount;
    }

    public void setAmount(Long amount) {
        this.amount = amount;
    }

    public Long getSent() {
        return sent;
    }

    public void setSent(Long sent) {
        this.sent = sent;
    }

    public Long getRemain() {
        return remain;
    }

    public void setRemain(Long remain) {
        this.remain = remain;
    }

    public Long getOrderId() {
        return orderId;
    }

    public void setOrderId(Long orderId) {
        this.orderId = orderId;
    }

    /** To-one relationship, resolved on first access. */
    public Order getOrder() {
        Long __key = this.orderId;
        if (order__resolvedKey == null || !order__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            OrderDao targetDao = daoSession.getOrderDao();
            Order orderNew = targetDao.load(__key);
            synchronized (this) {
                order = orderNew;
            	order__resolvedKey = __key;
            }
        }
        return order;
    }

    public void setOrder(Order order) {
        synchronized (this) {
            this.order = order;
            orderId = order == null ? null : order.getId();
            order__resolvedKey = orderId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Pack> getPacks() {
        if (packs == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PackDao targetDao = daoSession.getPackDao();
            List<Pack> packsNew = targetDao._queryMaterial_Packs(id);
            synchronized (this) {
                if(packs == null) {
                    packs = packsNew;
                }
            }
        }
        return packs;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetPacks() {
        packs = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
