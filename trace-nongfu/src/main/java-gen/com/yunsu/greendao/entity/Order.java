package com.yunsu.greendao.entity;

import com.yunsu.greendao.dao.DaoSession;
import com.yunsu.greendao.dao.MaterialDao;
import com.yunsu.greendao.dao.OrderDao;

import java.util.List;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "ORDER".
 */
public class Order {

    private Long id;
    private String orderNumber;
    private String customerName;
    private String consignee;
    private String contactPhone;
    private String deliveryAddress;
    private String transportationAgent;
    private String licensePlateNumber;
    private String carrierName;
    private String carrierPhone;
    private String carrierIdNumber;
    private String deliveryWarehouse;
    private String status;
    private String deliveryTime;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient OrderDao myDao;

    private List<Material> materials;

    public Order() {
    }

    public Order(Long id) {
        this.id = id;
    }

    public Order(Long id, String orderNumber, String customerName, String consignee, String contactPhone, String deliveryAddress, String transportationAgent, String licensePlateNumber, String carrierName, String carrierPhone, String carrierIdNumber, String deliveryWarehouse, String status, String deliveryTime) {
        this.id = id;
        this.orderNumber = orderNumber;
        this.customerName = customerName;
        this.consignee = consignee;
        this.contactPhone = contactPhone;
        this.deliveryAddress = deliveryAddress;
        this.transportationAgent = transportationAgent;
        this.licensePlateNumber = licensePlateNumber;
        this.carrierName = carrierName;
        this.carrierPhone = carrierPhone;
        this.carrierIdNumber = carrierIdNumber;
        this.deliveryWarehouse = deliveryWarehouse;
        this.status = status;
        this.deliveryTime = deliveryTime;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getOrderDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getOrderNumber() {
        return orderNumber;
    }

    public void setOrderNumber(String orderNumber) {
        this.orderNumber = orderNumber;
    }

    public String getCustomerName() {
        return customerName;
    }

    public void setCustomerName(String customerName) {
        this.customerName = customerName;
    }

    public String getConsignee() {
        return consignee;
    }

    public void setConsignee(String consignee) {
        this.consignee = consignee;
    }

    public String getContactPhone() {
        return contactPhone;
    }

    public void setContactPhone(String contactPhone) {
        this.contactPhone = contactPhone;
    }

    public String getDeliveryAddress() {
        return deliveryAddress;
    }

    public void setDeliveryAddress(String deliveryAddress) {
        this.deliveryAddress = deliveryAddress;
    }

    public String getTransportationAgent() {
        return transportationAgent;
    }

    public void setTransportationAgent(String transportationAgent) {
        this.transportationAgent = transportationAgent;
    }

    public String getLicensePlateNumber() {
        return licensePlateNumber;
    }

    public void setLicensePlateNumber(String licensePlateNumber) {
        this.licensePlateNumber = licensePlateNumber;
    }

    public String getCarrierName() {
        return carrierName;
    }

    public void setCarrierName(String carrierName) {
        this.carrierName = carrierName;
    }

    public String getCarrierPhone() {
        return carrierPhone;
    }

    public void setCarrierPhone(String carrierPhone) {
        this.carrierPhone = carrierPhone;
    }

    public String getCarrierIdNumber() {
        return carrierIdNumber;
    }

    public void setCarrierIdNumber(String carrierIdNumber) {
        this.carrierIdNumber = carrierIdNumber;
    }

    public String getDeliveryWarehouse() {
        return deliveryWarehouse;
    }

    public void setDeliveryWarehouse(String deliveryWarehouse) {
        this.deliveryWarehouse = deliveryWarehouse;
    }

    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    public String getDeliveryTime() {
        return deliveryTime;
    }

    public void setDeliveryTime(String deliveryTime) {
        this.deliveryTime = deliveryTime;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Material> getMaterials() {
        if (materials == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MaterialDao targetDao = daoSession.getMaterialDao();
            List<Material> materialsNew = targetDao._queryOrder_Materials(id);
            synchronized (this) {
                if(materials == null) {
                    materials = materialsNew;
                }
            }
        }
        return materials;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetMaterials() {
        materials = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
