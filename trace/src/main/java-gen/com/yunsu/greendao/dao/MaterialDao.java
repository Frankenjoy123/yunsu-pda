package com.yunsu.greendao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.yunsu.greendao.entity.Material;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MATERIAL".
*/
public class MaterialDao extends AbstractDao<Material, Long> {

    public static final String TABLENAME = "MATERIAL";

    /**
     * Properties of entity Material.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MaterialNumber = new Property(1, String.class, "materialNumber", false, "MATERIAL_NUMBER");
        public final static Property AgencyId = new Property(2, String.class, "agencyId", false, "AGENCY_ID");
        public final static Property AgencyName = new Property(3, String.class, "agencyName", false, "AGENCY_NAME");
        public final static Property ProgressStatus = new Property(4, String.class, "progressStatus", false, "PROGRESS_STATUS");
        public final static Property SyncStatus = new Property(5, String.class, "syncStatus", false, "SYNC_STATUS");
        public final static Property Amount = new Property(6, Long.class, "amount", false, "AMOUNT");
        public final static Property Sent = new Property(7, Long.class, "sent", false, "SENT");
        public final static Property CreateTime = new Property(8, String.class, "createTime", false, "CREATE_TIME");
        public final static Property FinishTime = new Property(9, String.class, "finishTime", false, "FINISH_TIME");
    };

    private DaoSession daoSession;


    public MaterialDao(DaoConfig config) {
        super(config);
    }
    
    public MaterialDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MATERIAL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"MATERIAL_NUMBER\" TEXT NOT NULL ," + // 1: materialNumber
                "\"AGENCY_ID\" TEXT," + // 2: agencyId
                "\"AGENCY_NAME\" TEXT," + // 3: agencyName
                "\"PROGRESS_STATUS\" TEXT," + // 4: progressStatus
                "\"SYNC_STATUS\" TEXT," + // 5: syncStatus
                "\"AMOUNT\" INTEGER," + // 6: amount
                "\"SENT\" INTEGER," + // 7: sent
                "\"CREATE_TIME\" TEXT," + // 8: createTime
                "\"FINISH_TIME\" TEXT);"); // 9: finishTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MATERIAL\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Material entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getMaterialNumber());
 
        String agencyId = entity.getAgencyId();
        if (agencyId != null) {
            stmt.bindString(3, agencyId);
        }
 
        String agencyName = entity.getAgencyName();
        if (agencyName != null) {
            stmt.bindString(4, agencyName);
        }
 
        String progressStatus = entity.getProgressStatus();
        if (progressStatus != null) {
            stmt.bindString(5, progressStatus);
        }
 
        String syncStatus = entity.getSyncStatus();
        if (syncStatus != null) {
            stmt.bindString(6, syncStatus);
        }
 
        Long amount = entity.getAmount();
        if (amount != null) {
            stmt.bindLong(7, amount);
        }
 
        Long sent = entity.getSent();
        if (sent != null) {
            stmt.bindLong(8, sent);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(9, createTime);
        }
 
        String finishTime = entity.getFinishTime();
        if (finishTime != null) {
            stmt.bindString(10, finishTime);
        }
    }

    @Override
    protected void attachEntity(Material entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Material readEntity(Cursor cursor, int offset) {
        Material entity = new Material( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // materialNumber
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // agencyId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // agencyName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // progressStatus
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // syncStatus
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // amount
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // sent
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // createTime
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // finishTime
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Material entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMaterialNumber(cursor.getString(offset + 1));
        entity.setAgencyId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAgencyName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setProgressStatus(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSyncStatus(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAmount(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setSent(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setCreateTime(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setFinishTime(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Material entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Material entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
