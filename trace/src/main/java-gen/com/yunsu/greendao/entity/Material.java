package com.yunsu.greendao.entity;

import java.util.List;
import com.yunsu.greendao.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.yunsu.greendao.dao.MaterialDao;
import com.yunsu.greendao.dao.PackDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "MATERIAL".
 */
public class Material {

    private Long id;
    /** Not-null value. */
    private String materialNumber;
    private String agencyId;
    private String agencyName;
    private String progressStatus;
    private String syncStatus;
    private Long amount;
    private Long sent;
    private String createTime;
    private String finishTime;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient MaterialDao myDao;

    private List<Pack> packs;

    public Material() {
    }

    public Material(Long id) {
        this.id = id;
    }

    public Material(Long id, String materialNumber, String agencyId, String agencyName, String progressStatus, String syncStatus, Long amount, Long sent, String createTime, String finishTime) {
        this.id = id;
        this.materialNumber = materialNumber;
        this.agencyId = agencyId;
        this.agencyName = agencyName;
        this.progressStatus = progressStatus;
        this.syncStatus = syncStatus;
        this.amount = amount;
        this.sent = sent;
        this.createTime = createTime;
        this.finishTime = finishTime;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getMaterialDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getMaterialNumber() {
        return materialNumber;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setMaterialNumber(String materialNumber) {
        this.materialNumber = materialNumber;
    }

    public String getAgencyId() {
        return agencyId;
    }

    public void setAgencyId(String agencyId) {
        this.agencyId = agencyId;
    }

    public String getAgencyName() {
        return agencyName;
    }

    public void setAgencyName(String agencyName) {
        this.agencyName = agencyName;
    }

    public String getProgressStatus() {
        return progressStatus;
    }

    public void setProgressStatus(String progressStatus) {
        this.progressStatus = progressStatus;
    }

    public String getSyncStatus() {
        return syncStatus;
    }

    public void setSyncStatus(String syncStatus) {
        this.syncStatus = syncStatus;
    }

    public Long getAmount() {
        return amount;
    }

    public void setAmount(Long amount) {
        this.amount = amount;
    }

    public Long getSent() {
        return sent;
    }

    public void setSent(Long sent) {
        this.sent = sent;
    }

    public String getCreateTime() {
        return createTime;
    }

    public void setCreateTime(String createTime) {
        this.createTime = createTime;
    }

    public String getFinishTime() {
        return finishTime;
    }

    public void setFinishTime(String finishTime) {
        this.finishTime = finishTime;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Pack> getPacks() {
        if (packs == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PackDao targetDao = daoSession.getPackDao();
            List<Pack> packsNew = targetDao._queryMaterial_Packs(id);
            synchronized (this) {
                if(packs == null) {
                    packs = packsNew;
                }
            }
        }
        return packs;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetPacks() {
        packs = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
