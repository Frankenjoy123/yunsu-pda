package com.yunsu.greendao.entity;

import com.yunsu.greendao.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.yunsu.greendao.dao.PackDao;
import com.yunsu.greendao.dao.ProductDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "PRODUCT".
 */
public class Product {

    private Long id;
    /** Not-null value. */
    private String productKey;
    private Long packId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ProductDao myDao;

    private Pack pack;
    private Long pack__resolvedKey;


    public Product() {
    }

    public Product(Long id) {
        this.id = id;
    }

    public Product(Long id, String productKey, Long packId) {
        this.id = id;
        this.productKey = productKey;
        this.packId = packId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getProductDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getProductKey() {
        return productKey;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setProductKey(String productKey) {
        this.productKey = productKey;
    }

    public Long getPackId() {
        return packId;
    }

    public void setPackId(Long packId) {
        this.packId = packId;
    }

    /** To-one relationship, resolved on first access. */
    public Pack getPack() {
        Long __key = this.packId;
        if (pack__resolvedKey == null || !pack__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PackDao targetDao = daoSession.getPackDao();
            Pack packNew = targetDao.load(__key);
            synchronized (this) {
                pack = packNew;
            	pack__resolvedKey = __key;
            }
        }
        return pack;
    }

    public void setPack(Pack pack) {
        synchronized (this) {
            this.pack = pack;
            packId = pack == null ? null : pack.getId();
            pack__resolvedKey = packId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
